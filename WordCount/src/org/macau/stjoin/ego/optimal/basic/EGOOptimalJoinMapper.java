package org.macau.stjoin.ego.optimal.basic;

/**
 * The Mapper uses the temporal information
 * R send same number 
 * S send one more time interval 
 * 
 */
import java.io.IOException;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.macau.flickr.util.FlickrSimilarityUtil;
import org.macau.flickr.util.FlickrValue;
import org.macau.stjoin.util.DataSimilarityUtil;

public class EGOOptimalJoinMapper extends
	Mapper<Object, Text, LongWritable, FlickrValue>{
	
	private final LongWritable outputKey = new LongWritable();
	
	private final FlickrValue outputValue = new FlickrValue();
	
	protected void setup(Context context) throws IOException, InterruptedException {

		System.out.println("mapper Start at " + System.currentTimeMillis());
	}
	
	
	public void map(Object key, Text value, Context context)
			throws IOException, InterruptedException {
		
		InputSplit inputSplit = context.getInputSplit();
				
		//get the the file name which is used for separating the different set
		String fileName = ((FileSplit)inputSplit).getPath().getName();
				
		
		int tag = FlickrSimilarityUtil.getTagByFileName(fileName);
		
		DataSimilarityUtil.getFlickrValue(outputValue, value.toString());
		
		long timeInterval = outputValue.getTimestamp() / FlickrSimilarityUtil.TEMPORAL_THRESHOLD;
		
		
		outputValue.setTileNumber((int)timeInterval);
		outputValue.setTag(tag);
		
		
		//for the R data
//		int [][] bounds= {{190,2444,119},{195,2444,119,},{199,2444,118},{205,2444,118}};
		
		//For the R and S data
//		int [][] bounds = {{191,2444,118},{196,2444,119},{201,2444,119},{207,2440,117}};
		
		
//		int[][] bounds = {{177,2443,117},{183,2443,116},{186,2442,118},{188,2443,117},{190,2442,114},{191,2441,116},{192,2442,116},{193,2442,115},{194,2442,114},{194,2443,116},{195,2442,117},{195,2443,118},{196,2442,119},{197,2442,115},{197,2443,118},{198,2443,114},{199,2442,114},{199,2443,116},{200,2441,120},{200,2443,115},{201,2441,117},{201,2443,115},{202,2442,113},{202,2443,116},{203,2442,115},{203,2443,117},{204,2442,117},{204,2443,117},{205,2442,117},{205,2443,117},{206,2442,117},{206,2443,117},{207,2442,117},{207,2443,119},{208,2443,115},{209,2442,116},{209,2444,117},{210,2443,116},{211,2442,117}};
		
		
		//The threshold is 7,partition is 40
//		int[][] bounds = {{1777,2114,112},{1836,2114,112},{1864,2114,112},{1887,2114,112},{1900,2114,112},{1910,2114,112},{1922,2114,112},{1931,2114,112},{1942,2114,112},{1948,2114,112},{1954,2114,112},{1960,2114,112},{1966,2114,112},{1972,2114,112},{1979,2114,112},{1986,2114,112},{1992,2114,112},{1997,2114,112},{2002,2114,112},{2007,2114,112},{2011,2114,112},{2016,2114,112},{2022,2114,112},{2027,2114,112},{2034,2114,112},{2039,2114,112},{2045,2114,112},{2050,2114,112},{2055,2114,112},{2059,2114,112},{2063,2114,112},{2068,2114,112},{2072,2114,112},{2078,2114,112},{2085,2114,112},{2092,2114,112},{2099,2114,112},{2106,2114,112},{2113,2114,112}};

		//threshold is 7, the partition is 30, data size partition.
//		int[][] bounds = {{1800,2114,112},{1860,2114,112},{1893,2114,112},{1908,2114,112},{1925,2114,112},{1938,2114,112},{1948,2114,112},{1955,2114,112},{1963,2114,112},{1972,2114,112},{1981,2114,112},{1990,2114,112},{1996,2114,112},{2003,2114,112},{2009,2114,112},{2015,2114,112},{2022,2114,112},{2029,2114,112},{2037,2114,112},{2044,2114,112},{2051,2114,112},{2057,2114,112},{2062,2114,112},{2069,2114,112},{2075,2114,112},{2084,2114,112},{2093,2114,112},{2102,2114,112},{2110,2114,112}};

		
		//The Threshold is 7 and partition is 25
//		int[][] bounds ={{1784,2114,112},{1861,2114,112},{1897,2114,112},{1915,2114,112},{1932,2114,112},{1947,2114,112},{1956,2114,112},{1966,2114,112},{1977,2114,112},{1988,2114,112},{1996,2114,112},{2004,2114,112},{2011,2114,112},{2019,2114,112},{2027,2114,112},{2037,2114,112},{2047,2114,112},{2054,2114,112},{2061,2114,112},{2068,2114,112},{2075,2114,112},{2086,2114,112},{2098,2114,112},{2108,2114,112}};
		
		//The computation and partition is 30
//		int[][] bounds = {{1056,2114,112},{1856,2114,112},{1903,2114,112},{1928,2114,112},{1945,2114,112},{1951,2114,112},{1958,2114,112},{1966,2114,112},{1975,2114,112},{1984,2114,112},{1992,2114,112},{1997,2114,112},{2003,2114,112},{2008,2114,112},{2012,2114,112},{2017,2114,112},{2023,2114,112},{2029,2114,112},{2037,2114,112},{2044,2114,112},{2050,2114,112},{2055,2114,112},{2059,2114,112},{2062,2114,112},{2068,2114,112},{2072,2114,112},{2079,2114,112},{2088,2114,112},{2099,2114,112},{2109,2114,112}};
		
		
		//1
//		int[][] bounds = {{1056,2114,112},{1425,2114,112},{1450,2114,112},{1487,2114,112},{1494,2114,112},{1503,2114,112},{1512,2114,112},{1572,2114,112},{1588,2114,112},{1594,2114,112},{1599,2114,112},{1605,2114,112},{1829,2114,112},{1885,2114,112},{1915,2114,112},{1941,2114,112},{1955,2114,112},{1968,2114,112},{1984,2114,112},{1996,2114,112},{2007,2114,112},{2019,2114,112},{2033,2114,112},{2047,2114,112},{2055,2114,112},{2064,2114,112},{2075,2114,112},{2090,2114,112},{2106,2114,112},{2122,2114,112}};
		
		
		//2
//		int[][] bounds = {{1056,2114,112},{1494,2114,112},{1503,2114,112},{1512,2114,112},{1572,2114,112},{1588,2114,112},{1594,2114,112},{1599,2114,112},{1605,2114,112},{1779,2114,112},{1876,2114,112},{1911,2114,112},{1932,2114,112},{1945,2114,112},{1955,2114,112},{1968,2114,112},{1985,2114,112},{1996,2114,112},{2003,2114,112},{2009,2114,112},{2018,2114,112},{2028,2114,112},{2041,2114,112},{2051,2114,112},{2058,2114,112},{2065,2114,112},{2073,2114,112},{2088,2114,112},{2105,2114,112},{2122,2114,112}};
		
		
		//3
//		int[][] bounds = {{1056,2114,112},{1572,2114,112},{1588,2114,112},{1594,2114,112},{1599,2114,112},{1605,2114,112},{1779,2114,112},{1876,2114,112},{1911,2114,112},{1932,2114,112},{1946,2114,112},{1955,2114,112},{1964,2114,112},{1976,2114,112},{1988,2114,112},{1995,2114,112},{2003,2114,112},{2009,2114,112},{2014,2114,112},{2018,2114,112},{2025,2114,112},{2036,2114,112},{2047,2114,112},{2053,2114,112},{2059,2114,112},{2065,2114,112},{2071,2114,112},{2079,2114,112},{2090,2114,112},{2106,2114,112}};
		
		
		//4
//		int[][] bounds = {{1056,2114,112},{1599,2114,112},{1605,2114,112},{1829,2114,112},{1893,2114,112},{1920,2114,112},{1941,2114,112},{1949,2114,112},{1956,2114,112},{1964,2114,112},{1974,2114,112},{1984,2114,112},{1991,2114,112},{1996,2114,112},{2003,2114,112},{2008,2114,112},{2012,2114,112},{2018,2114,112},{2024,2114,112},{2033,2114,112},{2041,2114,112},{2049,2114,112},{2054,2114,112},{2058,2114,112},{2062,2114,112},{2068,2114,112},{2071,2114,112},{2079,2114,112},{2090,2114,112},{2107,2114,112}};
		
		
		//5
//		int[][] bounds = {{1056,2114,112},{1856,2114,112},{1903,2114,112},{1928,2114,112},{1945,2114,112},{1951,2114,112},{1958,2114,112},{1966,2114,112},{1975,2114,112},{1984,2114,112},{1992,2114,112},{1997,2114,112},{2003,2114,112},{2008,2114,112},{2012,2114,112},{2017,2114,112},{2023,2114,112},{2029,2114,112},{2037,2114,112},{2044,2114,112},{2050,2114,112},{2055,2114,112},{2059,2114,112},{2062,2114,112},{2068,2114,112},{2072,2114,112},{2079,2114,112},{2088,2114,112},{2099,2114,112},{2109,2114,112}};
		
		//threshold is 7 and the  data size
//		int[][] bounds = {{1051,2114,112},{1800,2114,112},{1860,2114,112},{1893,2114,112},{1908,2114,112},{1925,2114,112},{1938,2114,112},{1948,2114,112},{1955,2114,112},{1963,2114,112},{1972,2114,112},{1981,2114,112},{1990,2114,112},{1996,2114,112},{2003,2114,112},{2009,2114,112},{2015,2114,112},{2022,2114,112},{2029,2114,112},{2037,2114,112},{2044,2114,112},{2051,2114,112},{2057,2114,112},{2062,2114,112},{2069,2114,112},{2075,2114,112},{2084,2114,112},{2093,2114,112},{2102,2114,112},{2110,2114,112}};
		
		
//		int[][] bounds = new int[30][3];
//		
//		int[][] bounds = {{105,2114,112},{185,2114,112},{190,2114,112},{192,2114,112},{194,2114,112},{195,2114,112},{195,2114,112},{196,2114,112},{197,2114,112},{198,2114,112},{199,2114,112},{199,2114,112},{200,2114,112},{200,2114,112},{201,2114,112},{201,2114,112},{202,2114,112},{202,2114,112},{203,2114,112},{204,2114,112},{205,2114,112},{205,2114,112},{205,2114,112},{206,2114,112},{206,2114,112},{207,2114,112},{207,2114,112},{208,2114,112},{209,2114,112},{210,2114,112}};
//		int[][] bounds = {{105,2114,112},{185,2114,112},{190,2114,112},{192,2114,112},{194,2114,112},{195,2114,112},{196,2114,112},{197,2114,112},{198,2114,112},{199,2114,112},{200,2114,112},{201,2114,112},{202,2114,112},{203,2114,112},{204,2114,112},{205,2114,112},{206,2114,112},{207,2114,112},{208,2114,112},{209,2114,112},{210,2114,112}};

//		
//		for(int i = 0;i < 30;i++){
//			for(int j = 0; j < 3;j++){
//				int m = FlickrSimilarityJoin.bound[i][j];
//				bounds[i][j] = m;
//			}
//		}
//		
		//threshold 14
		//1
//		int[][] bounds = {{528,2114,112},{623,2114,112},{645,2114,112},{652,2114,112},{724,2114,112},{745,2114,112},{746,2114,112},{768,2114,112},{781,2114,112},{793,2114,112},{799,2114,112},{802,2114,112},{914,2114,112},{945,2114,112},{959,2114,112},{971,2114,112},{978,2114,112},{985,2114,112},{993,2114,112},{999,2114,112},{1004,2114,112},{1009,2114,112},{1013,2114,112},{1019,2114,112},{1023,2114,112},{1028,2114,112},{1033,2114,112},{1038,2114,112},{1045,2114,112},{1053,2114,112}};

		//2
//		int[][] bounds = {{528,2114,112},{724,2114,112},{745,2114,112},{746,2114,112},{768,2114,112},{781,2114,112},{793,2114,112},{799,2114,112},{802,2114,112},{914,2114,112},{943,2114,112},{958,2114,112},{970,2114,112},{977,2114,112},{982,2114,112},{988,2114,112},{993,2114,112},{998,2114,112},{1002,2114,112},{1005,2114,112},{1009,2114,112},{1013,2114,112},{1019,2114,112},{1024,2114,112},{1028,2114,112},{1031,2114,112},{1035,2114,112},{1041,2114,112},{1049,2114,112},{1055,2114,112}};


		//3
//		int[][] bounds = {{528,2114,112},{745,2114,112},{746,2114,112},{768,2114,112},{781,2114,112},{793,2114,112},{799,2114,112},{802,2114,112},{914,2114,112},{943,2114,112},{958,2114,112},{970,2114,112},{976,2114,112},{981,2114,112},{988,2114,112},{994,2114,112},{998,2114,112},{1002,2114,112},{1005,2114,112},{1009,2114,112},{1013,2114,112},{1019,2114,112},{1023,2114,112},{1026,2114,112},{1029,2114,112},{1032,2114,112},{1035,2114,112},{1039,2114,112},{1045,2114,112},{1053,2114,112}};

		//4
//		int[][] bounds = {{528,2114,112},{799,2114,112},{802,2114,112},{914,2114,112},{942,2114,112},{956,2114,112},{967,2114,112},{973,2114,112},{977,2114,112},{982,2114,112},{987,2114,112},{993,2114,112},{996,2114,112},{999,2114,112},{1001,2114,112},{1004,2114,112},{1006,2114,112},{1010,2114,112},{1013,2114,112},{1018,2114,112},{1023,2114,112},{1026,2114,112},{1028,2114,112},{1030,2114,112},{1032,2114,112},{1035,2114,112},{1038,2114,112},{1042,2114,112},{1049,2114,112},{1055,2114,112}};


		//5
//		int[][] bounds = {{528,2114,112},{914,2114,112},{947,2114,112},{960,2114,112},{971,2114,112},{975,2114,112},{979,2114,112},{983,2114,112},{988,2114,112},{993,2114,112},{996,2114,112},{999,2114,112},{1002,2114,112},{1004,2114,112},{1006,2114,112},{1009,2114,112},{1011,2114,112},{1014,2114,112},{1018,2114,112},{1022,2114,112},{1025,2114,112},{1027,2114,112},{1029,2114,112},{1031,2114,112},{1033,2114,112},{1035,2114,112},{1037,2114,112},{1041,2114,112},{1047,2114,112},{1054,2114,112}};

		//data size based
//		int[][] bounds = {{525,2114,112},{907,2114,112},{936,2114,112},{950,2114,112},{958,2114,112},{965,2114,112},{972,2114,112},{976,2114,112},{980,2114,112},{984,2114,112},{988,2114,112},{993,2114,112},{997,2114,112},{1000,2114,112},{1003,2114,112},{1006,2114,112},{1009,2114,112},{1012,2114,112},{1015,2114,112},{1019,2114,112},{1023,2114,112},{1026,2114,112},{1029,2114,112},{1031,2114,112},{1034,2114,112},{1037,2114,112},{1041,2114,112},{1046,2114,112},{1051,2114,112},{1055,2114,112}};

		//threshold 10 and computation
		
//		int[][] bounds = {{739,2114,112},{1295,2114,112},{1330,2114,112},{1348,2114,112},{1361,2114,112},{1366,2114,112},{1371,2114,112},{1377,2114,112},{1383,2114,112},{1390,2114,112},{1395,2114,112},{1399,2114,112},{1403,2114,112},{1406,2114,112},{1409,2114,112},{1413,2114,112},{1416,2114,112},{1420,2114,112},{1426,2114,112},{1430,2114,112},{1433,2114,112},{1436,2114,112},{1439,2114,112},{1442,2114,112},{1445,2114,112},{1448,2114,112},{1451,2114,112},{1457,2114,112},{1465,2114,112},{1476,2114,112}};
		
		//threshold 10 and data size
//		int[][] bounds = {{736,2114,112},{1256,2114,112},{1302,2114,112},{1326,2114,112},{1337,2114,112},{1348,2114,112},{1358,2114,112},{1365,2114,112},{1370,2114,112},{1376,2114,112},{1382,2114,112},{1388,2114,112},{1394,2114,112},{1399,2114,112},{1404,2114,112},{1408,2114,112},{1413,2114,112},{1418,2114,112},{1424,2114,112},{1429,2114,112},{1434,2114,112},{1438,2114,112},{1442,2114,112},{1445,2114,112},{1449,2114,112},{1453,2114,112},{1459,2114,112},{1465,2114,112},{1471,2114,112},{1477,2114,112}};
		
		//threshold 70 and data size
//		int[][] bounds = {{105,2114,112},{179,2114,112},{186,2114,112},{189,2114,112},{191,2114,112},{192,2114,112},{194,2114,112},{195,2114,112},{195,2114,112},{196,2114,112},{197,2114,112},{198,2114,112},{199,2114,112},{199,2114,112},{200,2114,112},{201,2114,112},{201,2114,112},{202,2114,112},{203,2114,112},{204,2114,112},{204,2114,112},{205,2114,112},{206,2114,112},{206,2114,112},{207,2114,112},{207,2114,112},{208,2114,112},{209,2114,112},{210,2114,112},{211,2114,112}};
		
		//threshold 70 and computation
//		int[][] bounds = {{105,2114,112},{185,2114,112},{190,2114,112},{192,2114,112},{194,2114,112},{195,2114,112},{195,2114,112},{196,2114,112},{197,2114,112},{198,2114,112},{199,2114,112},{199,2114,112},{200,2114,112},{200,2114,112},{201,2114,112},{201,2114,112},{202,2114,112},{202,2114,112},{203,2114,112},{204,2114,112},{204,2114,112},{205,2114,112},{205,2114,112},{206,2114,112},{206,2114,112},{206,2114,112},{207,2114,112},{208,2114,112},{209,2114,112},{210,2114,112}};
		
		//threshold 1 and computation
//		int[][] bounds = {{7390,2114,112},{12950,2114,112},{13300,2114,112},{13480,2114,112},{13610,2114,112},{13660,2114,112},{13710,2114,112},{13770,2114,112},{13830,2114,112},{13900,2114,112},{13950,2114,112},{13990,2114,112},{14030,2114,112},{14060,2114,112},{14090,2114,112},{14130,2114,112},{14160,2114,112},{14200,2114,112},{14260,2114,112},{14300,2114,112},{14330,2114,112},{14360,2114,112},{14390,2114,112},{14420,2114,112},{14450,2114,112},{14480,2114,112},{14510,2114,112},{14570,2114,112},{14650,2114,112},{14760,2114,112}};
		
		//threshold 1 and data size
//		int[][] bounds = {{7360,2114,112},{12560,2114,112},{13020,2114,112},{13260,2114,112},{13370,2114,112},{13480,2114,112},{13580,2114,112},{13650,2114,112},{13700,2114,112},{13760,2114,112},{13820,2114,112},{13880,2114,112},{13940,2114,112},{13990,2114,112},{14040,2114,112},{14080,2114,112},{14130,2114,112},{14180,2114,112},{14240,2114,112},{14290,2114,112},{14340,2114,112},{14380,2114,112},{14420,2114,112},{14450,2114,112},{14490,2114,112},{14530,2114,112},{14590,2114,112},{14650,2114,112},{14710,2114,112},{14770,2114,112}};
		
//		int[][] bounds = {{7363,2114,112},{12609,2114,112},{12990,2114,112},{13220,2114,112},{13328,2114,112},{13431,2114,112},{13521,2114,112},{13610,2114,112},{13663,2114,112},{13718,2114,112},{13777,2114,112},{13842,2114,112},{13906,2114,112},{13957,2114,112},{14005,2114,112},{14050,2114,112},{14089,2114,112},{14142,2114,112},{14187,2114,112},{14246,2114,112},{14299,2114,112},{14349,2114,112},{14394,2114,112},{14433,2114,112},{14480,2114,112},{14522,2114,112},{14584,2114,112},{14648,2114,112},{14712,2114,112},{14775,2114,112}};
		
		
		//threshold 0.1 and computation
//		int[][] bounds = {{73900,2114,112},{129500,2114,112},{133000,2114,112},{134800,2114,112},{136100,2114,112},{136600,2114,112},{137100,2114,112},{137700,2114,112},{138300,2114,112},{139000,2114,112},{139500,2114,112},{139900,2114,112},{140300,2114,112},{140600,2114,112},{140900,2114,112},{141300,2114,112},{141600,2114,112},{142000,2114,112},{142600,2114,112},{143000,2114,112},{143300,2114,112},{143600,2114,112},{143900,2114,112},{144200,2114,112},{144500,2114,112},{144800,2114,112},{145100,2114,112},{145700,2114,112},{146500,2114,112},{147600,2114,112}};
		
		//threshold 0.1 and computation
//		int[][] bounds = {{73600,2114,112},{125600,2114,112},{130200,2114,112},{132600,2114,112},{133700,2114,112},{134800,2114,112},{135800,2114,112},{136500,2114,112},{137000,2114,112},{137600,2114,112},{138200,2114,112},{138800,2114,112},{139400,2114,112},{139900,2114,112},{140400,2114,112},{140800,2114,112},{141300,2114,112},{141800,2114,112},{142400,2114,112},{142900,2114,112},{143400,2114,112},{143800,2114,112},{144200,2114,112},{144500,2114,112},{144900,2114,112},{145300,2114,112},{145900,2114,112},{146500,2114,112},{147100,2114,112},{147700,2114,112}};
		
		
		
		//threshold 0.01 and computation
//		int[][] bounds = {{739000,2114,112},{1295000,2114,112},{1330000,2114,112},{1348000,2114,112},{1361000,2114,112},{1366000,2114,112},{1371000,2114,112},{1377000,2114,112},{1383000,2114,112},{1390000,2114,112},{1395000,2114,112},{1399000,2114,112},{1403000,2114,112},{1406000,2114,112},{1409000,2114,112},{1413000,2114,112},{1416000,2114,112},{1420000,2114,112},{1426000,2114,112},{1430000,2114,112},{1433000,2114,112},{1436000,2114,112},{1439000,2114,112},{1442000,2114,112},{1445000,2114,112},{1448000,2114,112},{1451000,2114,112},{1457000,2114,112},{1465000,2114,112},{1476000,2114,112}};
		
		//threshold 0.01 and data size
//		int[][] bounds = {{736000,2114,112},{1256000,2114,112},{1302000,2114,112},{1326000,2114,112},{1337000,2114,112},{1348000,2114,112},{1358000,2114,112},{1365000,2114,112},{1370000,2114,112},{1376000,2114,112},{1382000,2114,112},{1388000,2114,112},{1394000,2114,112},{1399000,2114,112},{1404000,2114,112},{1408000,2114,112},{1413000,2114,112},{1418000,2114,112},{1424000,2114,112},{1429000,2114,112},{1434000,2114,112},{1438000,2114,112},{1442000,2114,112},{1445000,2114,112},{1449000,2114,112},{1453000,2114,112},{1459000,2114,112},{1465000,2114,112},{1471000,2114,112},{1477000,2114,112}};
		
		
		
		//bri
		//3
//		int[][] bounds = {{13959,2114,112},{13962,2114,112},{13969,2114,112},{13975,2114,112},{13976,2114,112},{13977,2114,112},{14073,2114,112},{14147,2114,112},{14184,2114,112},{14207,2114,112},{14231,2114,112},{14256,2114,112},{14277,2114,112},{14293,2114,112},{14312,2114,112},{14327,2114,112},{14348,2114,112},{14368,2114,112},{14389,2114,112},{14410,2114,112},{14426,2114,112},{14445,2114,112},{14461,2114,112},{14480,2114,112},{14501,2114,112},{14525,2114,112},{14574,2114,112},{14651,2114,112},{14766,2114,112},{14850,2114,112}};
		//4
//		int[][] bounds = {{13959,2114,112},{13976,2114,112},{14038,2114,112},{14095,2114,112},{14164,2114,112},{14186,2114,112},{14207,2114,112},{14228,2114,112},{14246,2114,112},{14266,2114,112},{14284,2114,112},{14298,2114,112},{14312,2114,112},{14327,2114,112},{14346,2114,112},{14364,2114,112},{14382,2114,112},{14399,2114,112},{14418,2114,112},{14435,2114,112},{14451,2114,112},{14467,2114,112},{14482,2114,112},{14501,2114,112},{14525,2114,112},{14566,2114,112},{14627,2114,112},{14721,2114,112},{14795,2114,112},{14864,2114,112}};
		//5
//		int[][] bounds = {{13959,2114,112},{14059,2114,112},{14115,2114,112},{14171,2114,112},{14186,2114,112},{14204,2114,112},{14224,2114,112},{14245,2114,112},{14263,2114,112},{14279,2114,112},{14294,2114,112},{14309,2114,112},{14322,2114,112},{14337,2114,112},{14354,2114,112},{14371,2114,112},{14387,2114,112},{14404,2114,112},{14421,2114,112},{14436,2114,112},{14451,2114,112},{14466,2114,112},{14481,2114,112},{14498,2114,112},{14516,2114,112},{14553,2114,112},{14597,2114,112},{14669,2114,112},{14781,2114,112},{14862,2114,112}};
		
		//threshold is 1 and computation
//		int[][] bounds = {{13959,2114,112},{14059,2114,112},{14115,2114,112},{14171,2114,112},{14186,2114,112},{14204,2114,112},{14224,2114,112},{14245,2114,112},{14263,2114,112},{14279,2114,112},{14294,2114,112},{14309,2114,112},{14322,2114,112},{14337,2114,112},{14354,2114,112},{14371,2114,112},{14387,2114,112},{14404,2114,112},{14421,2114,112},{14436,2114,112},{14451,2114,112},{14466,2114,112},{14481,2114,112},{14498,2114,112},{14516,2114,112},{14553,2114,112},{14597,2114,112},{14669,2114,112},{14781,2114,112},{14862,2114,112}};
		
		//threshold is 0.5 and computation
//		int[][] bounds = {{27918,2114,112},{28118,2114,112},{28230,2114,112},{28342,2114,112},{28372,2114,112},{28408,2114,112},{28448,2114,112},{28490,2114,112},{28526,2114,112},{28558,2114,112},{28588,2114,112},{28618,2114,112},{28644,2114,112},{28674,2114,112},{28708,2114,112},{28742,2114,112},{28774,2114,112},{28808,2114,112},{28842,2114,112},{28872,2114,112},{28902,2114,112},{28932,2114,112},{28962,2114,112},{28996,2114,112},{29032,2114,112},{29106,2114,112},{29194,2114,112},{29338,2114,112},{29562,2114,112},{29724,2114,112}};
		
		//threshold is 0.1 and computation
//		int[][] bounds = {{139590,2114,112},{140590,2114,112},{141150,2114,112},{141710,2114,112},{141860,2114,112},{142040,2114,112},{142240,2114,112},{142450,2114,112},{142630,2114,112},{142790,2114,112},{142940,2114,112},{143090,2114,112},{143220,2114,112},{143370,2114,112},{143540,2114,112},{143710,2114,112},{143870,2114,112},{144040,2114,112},{144210,2114,112},{144360,2114,112},{144510,2114,112},{144660,2114,112},{144810,2114,112},{144980,2114,112},{145160,2114,112},{145530,2114,112},{145970,2114,112},{146690,2114,112},{147810,2114,112},{148620,2114,112}};
		
		//threshold is 0.01 and computation
//		int[][] bounds = {{1395900,2114,112},{1405900,2114,112},{1411500,2114,112},{1417100,2114,112},{1418600,2114,112},{1420400,2114,112},{1422400,2114,112},{1424500,2114,112},{1426300,2114,112},{1427900,2114,112},{1429400,2114,112},{1430900,2114,112},{1432200,2114,112},{1433700,2114,112},{1435400,2114,112},{1437100,2114,112},{1438700,2114,112},{1440400,2114,112},{1442100,2114,112},{1443600,2114,112},{1445100,2114,112},{1446600,2114,112},{1448100,2114,112},{1449800,2114,112},{1451600,2114,112},{1455300,2114,112},{1459700,2114,112},{1466900,2114,112},{1478100,2114,112},{1486200,2114,112}};
		
		
		
		//threshold is 1 and data size
//		int[][] bounds = {{13959,2114,112},{14040,2114,112},{14077,2114,112},{14117,2114,112},{14158,2114,112},{14185,2114,112},{14207,2114,112},{14230,2114,112},{14253,2114,112},{14274,2114,112},{14294,2114,112},{14314,2114,112},{14333,2114,112},{14354,2114,112},{14375,2114,112},{14396,2114,112},{14417,2114,112},{14437,2114,112},{14456,2114,112},{14475,2114,112},{14495,2114,112},{14517,2114,112},{14548,2114,112},{14582,2114,112},{14622,2114,112},{14667,2114,112},{14718,2114,112},{14786,2114,112},{14830,2114,112},{14868,2114,112}};
		//threshold is 0.5 and data size
		int[][] bounds = {{27918,2114,112},{28080,2114,112},{28154,2114,112},{28234,2114,112},{28316,2114,112},{28370,2114,112},{28414,2114,112},{28460,2114,112},{28506,2114,112},{28548,2114,112},{28588,2114,112},{28628,2114,112},{28666,2114,112},{28708,2114,112},{28750,2114,112},{28792,2114,112},{28834,2114,112},{28874,2114,112},{28912,2114,112},{28950,2114,112},{28990,2114,112},{29034,2114,112},{29096,2114,112},{29164,2114,112},{29244,2114,112},{29334,2114,112},{29436,2114,112},{29572,2114,112},{29660,2114,112},{29736,2114,112}};
		
		//threshold is 0.1 and data size
//		int[][] bounds = {{139590,2114,112},{140400,2114,112},{140770,2114,112},{141170,2114,112},{141580,2114,112},{141850,2114,112},{142070,2114,112},{142300,2114,112},{142530,2114,112},{142740,2114,112},{142940,2114,112},{143140,2114,112},{143330,2114,112},{143540,2114,112},{143750,2114,112},{143960,2114,112},{144170,2114,112},{144370,2114,112},{144560,2114,112},{144750,2114,112},{144950,2114,112},{145170,2114,112},{145480,2114,112},{145820,2114,112},{146220,2114,112},{146670,2114,112},{147180,2114,112},{147860,2114,112},{148300,2114,112},{148680,2114,112}};
		
		
		//threshold is 0.01 and data size
//		int[][] bounds = {{1395900,2114,112},{1404000,2114,112},{1407700,2114,112},{1411700,2114,112},{1415800,2114,112},{1418500,2114,112},{1420700,2114,112},{1423000,2114,112},{1425300,2114,112},{1427400,2114,112},{1429400,2114,112},{1431400,2114,112},{1433300,2114,112},{1435400,2114,112},{1437500,2114,112},{1439600,2114,112},{1441700,2114,112},{1443700,2114,112},{1445600,2114,112},{1447500,2114,112},{1449500,2114,112},{1451700,2114,112},{1454800,2114,112},{1458200,2114,112},{1462200,2114,112},{1466700,2114,112},{1471800,2114,112},{1478600,2114,112},{1483000,2114,112},{1486800,2114,112}};
		
		
		//Gawalla
//		int[][] bounds = {{14278,2114,112},{14519,2114,112},{14524,2114,112},{14528,2114,112},{14532,2114,112},{14534,2114,112},{14536,2114,112},{14539,2114,112},{14541,2114,112},{14543,2114,112},{14545,2114,112},{14547,2114,112},{14624,2114,112},{14663,2114,112},{14685,2114,112},{14700,2114,112},{14716,2114,112},{14733,2114,112},{14754,2114,112},{14770,2114,112},{14784,2114,112},{14797,2114,112},{14815,2114,112},{14830,2114,112},{14844,2114,112},{14856,2114,112},{14867,2114,112},{14877,2114,112},{14886,2114,112},{14895,2114,112}};

		///threshold is 1 and computation
//		int[][] bounds = {{14278,2114,112},{14616,2114,112},{14655,2114,112},{14683,2114,112},{14696,2114,112},{14712,2114,112},{14728,2114,112},{14746,2114,112},{14763,2114,112},{14777,2114,112},{14790,2114,112},{14801,2114,112},{14812,2114,112},{14821,2114,112},{14828,2114,112},{14835,2114,112},{14841,2114,112},{14847,2114,112},{14853,2114,112},{14858,2114,112},{14863,2114,112},{14868,2114,112},{14872,2114,112},{14877,2114,112},{14882,2114,112},{14886,2114,112},{14890,2114,112},{14893,2114,112},{14897,2114,112},{14899,2114,112}};

		///threshold is 0.5 and computation
//		int[][] bounds = {{28556,2114,112},{29232,2114,112},{29310,2114,112},{29366,2114,112},{29392,2114,112},{29424,2114,112},{29456,2114,112},{29492,2114,112},{29526,2114,112},{29554,2114,112},{29580,2114,112},{29602,2114,112},{29624,2114,112},{29642,2114,112},{29656,2114,112},{29670,2114,112},{29682,2114,112},{29694,2114,112},{29706,2114,112},{29716,2114,112},{29726,2114,112},{29736,2114,112},{29744,2114,112},{29754,2114,112},{29764,2114,112},{29772,2114,112},{29780,2114,112},{29786,2114,112},{29794,2114,112},{29798,2114,112}};
		
		
		//threshold is 0.1 and computation
//		int[][] bounds = {{142780,2114,112},{146160,2114,112},{146550,2114,112},{146830,2114,112},{146960,2114,112},{147120,2114,112},{147280,2114,112},{147460,2114,112},{147630,2114,112},{147770,2114,112},{147900,2114,112},{148010,2114,112},{148120,2114,112},{148210,2114,112},{148280,2114,112},{148350,2114,112},{148410,2114,112},{148470,2114,112},{148530,2114,112},{148580,2114,112},{148630,2114,112},{148680,2114,112},{148720,2114,112},{148770,2114,112},{148820,2114,112},{148860,2114,112},{148900,2114,112},{148930,2114,112},{148970,2114,112},{148990,2114,112}};

		//threshold is 0.01 and computation
//		int[][] bounds = {{1427800,2114,112},{1461600,2114,112},{1465500,2114,112},{1468300,2114,112},{1469600,2114,112},{1471200,2114,112},{1472800,2114,112},{1474600,2114,112},{1476300,2114,112},{1477700,2114,112},{1479000,2114,112},{1480100,2114,112},{1481200,2114,112},{1482100,2114,112},{1482800,2114,112},{1483500,2114,112},{1484100,2114,112},{1484700,2114,112},{1485300,2114,112},{1485800,2114,112},{1486300,2114,112},{1486800,2114,112},{1487200,2114,112},{1487700,2114,112},{1488200,2114,112},{1488600,2114,112},{1489000,2114,112},{1489300,2114,112},{1489700,2114,112},{1489900,2114,112}};

		//threshold is 0.5 and data size
//		int[][] bounds = {{28557,2114,112},{29191,2114,112},{29246,2114,112},{29288,2114,112},{29330,2114,112},{29363,2114,112},{29383,2114,112},{29406,2114,112},{29430,2114,112},{29454,2114,112},{29480,2114,112},{29507,2114,112},{29531,2114,112},{29554,2114,112},{29575,2114,112},{29596,2114,112},{29616,2114,112},{29634,2114,112},{29651,2114,112},{29667,2114,112},{29682,2114,112},{29696,2114,112},{29710,2114,112},{29723,2114,112},{29736,2114,112},{29748,2114,112},{29760,2114,112},{29772,2114,112},{29784,2114,112},{29795,2114,112}};
		
		
		//threshold is 1 and data size
//		int[][] bounds = {{14278,2114,112},{14597,2114,112},{14625,2114,112},{14647,2114,112},{14669,2114,112},{14684,2114,112},{14695,2114,112},{14707,2114,112},{14719,2114,112},{14731,2114,112},{14744,2114,112},{14758,2114,112},{14770,2114,112},{14781,2114,112},{14792,2114,112},{14802,2114,112},{14812,2114,112},{14821,2114,112},{14829,2114,112},{14837,2114,112},{14844,2114,112},{14851,2114,112},{14858,2114,112},{14864,2114,112},{14870,2114,112},{14876,2114,112},{14882,2114,112},{14888,2114,112},{14893,2114,112},{14898,2114,112}};
		
		//threshold is 0.l and data size
//		int[][] bounds = {{142780,2114,112},{145970,2114,112},{146250,2114,112},{146470,2114,112},{146690,2114,112},{146840,2114,112},{146950,2114,112},{147070,2114,112},{147190,2114,112},{147310,2114,112},{147440,2114,112},{147580,2114,112},{147700,2114,112},{147810,2114,112},{147920,2114,112},{148020,2114,112},{148120,2114,112},{148210,2114,112},{148290,2114,112},{148370,2114,112},{148440,2114,112},{148510,2114,112},{148580,2114,112},{148640,2114,112},{148700,2114,112},{148760,2114,112},{148820,2114,112},{148880,2114,112},{148930,2114,112},{148980,2114,112}};
		
		//threshold is 0.01 and data size
//		int[][] bounds = {{1427800,2114,112},{1459700,2114,112},{1462500,2114,112},{1464700,2114,112},{1466900,2114,112},{1468400,2114,112},{1469500,2114,112},{1470700,2114,112},{1471900,2114,112},{1473100,2114,112},{1474400,2114,112},{1475800,2114,112},{1477000,2114,112},{1478100,2114,112},{1479200,2114,112},{1480200,2114,112},{1481200,2114,112},{1482100,2114,112},{1482900,2114,112},{1483700,2114,112},{1484400,2114,112},{1485100,2114,112},{1485800,2114,112},{1486400,2114,112},{1487000,2114,112},{1487600,2114,112},{1488200,2114,112},{1488800,2114,112},{1489300,2114,112},{1489800,2114,112}};
		
		//The Original temporal partition, for each time interval, it is a partition, for the R
		//the time interval is the key, while for the S set, copy to other partition in the bound
		
		
		
		/****************************************************************
		 * 
		 * 
		 * The Partition Method
		 * 
		 * 
		 * 
		 ****************************************************************/
		
		
		if(!outputValue.getTiles().equals("null")){
		
		if(tag == FlickrSimilarityUtil.S_tag){
			
			int pNumber = 0;
			
			if(timeInterval >= bounds[bounds.length-1][0]){
				
				pNumber = bounds.length;
				
			}else{
				
				for(int i = 0; i < bounds.length;i++){
					
					if(timeInterval < bounds[i][0]){
						pNumber = i;
						break;
					}
				}
			}
			
			outputKey.set(pNumber);
			outputValue.setTileNumber((int)timeInterval );
			context.write(outputKey, outputValue);
			
			if(pNumber == 0){
				if(timeInterval- bounds[0][0] == -1){
					outputKey.set(pNumber+1);
					outputValue.setTileNumber((int)timeInterval );
					context.write(outputKey, outputValue);
				}
			}
			
			if(pNumber == bounds.length){
				if(timeInterval- bounds[bounds.length-1][0] == 0){
					outputKey.set(pNumber-1);
					outputValue.setTileNumber((int)timeInterval );
					context.write(outputKey, outputValue);
				}
			}
			
			
			if(pNumber >= 1 && pNumber <= bounds.length-1){
				
				if(timeInterval- bounds[pNumber-1][0] == 0){
					outputKey.set(pNumber-1);
					outputValue.setTileNumber((int)timeInterval );
					context.write(outputKey, outputValue);
				}
				
				
				if(timeInterval- bounds[pNumber][0] == -1){
					outputKey.set(pNumber+1);
					outputValue.setTileNumber((int)timeInterval );
					context.write(outputKey, outputValue);
				}
			}
			
			
		}else{
			
			int pNumber = 0;
			
			if(timeInterval >= bounds[bounds.length-1][0]){
				
				pNumber = bounds.length;
				
			}else{
				
				for(int i = 0; i < bounds.length;i++){
					
					if(timeInterval < bounds[i][0]){
						pNumber = i;
						break;
					}
				}
			}
			
			//for the R set
			outputKey.set(pNumber);
			outputValue.setTileNumber((int)timeInterval);
			context.write(outputKey, outputValue);
		}
		}
		
	
		
		
		
		
	}
	protected void cleanup(Context context) throws IOException, InterruptedException {
		System.out.println("The mapper end at " + System.currentTimeMillis() + "\n" );
	}
}