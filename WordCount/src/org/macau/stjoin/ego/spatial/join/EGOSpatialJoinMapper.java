package org.macau.stjoin.ego.spatial.join;

/**
 * The Mapper uses the temporal information
 * R send same number 
 * S send one more time interval 
 * 
 */
import java.io.IOException;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.macau.flickr.util.FlickrSimilarityUtil;
import org.macau.flickr.util.FlickrValueWithKey;
import org.macau.stjoin.util.DataSimilarityUtil;

public class EGOSpatialJoinMapper extends
	Mapper<Object, Text, LongWritable, FlickrValueWithKey>{
	
	private final LongWritable outputKey = new LongWritable();
	
	private final FlickrValueWithKey outputValue = new FlickrValueWithKey();
	
	protected void setup(Context context) throws IOException, InterruptedException {

		System.out.println("mapper Start at " + System.currentTimeMillis());
	}
	
	
	public void map(Object key, Text value, Context context)
			throws IOException, InterruptedException {
		
		InputSplit inputSplit = context.getInputSplit();
				
		//get the the file name which is used for separating the different set
		String fileName = ((FileSplit)inputSplit).getPath().getName();
				
		
		int tag = FlickrSimilarityUtil.getTagByFileName(fileName);
		
		DataSimilarityUtil.getFlickrValue(outputValue, value.toString());
		
		double thres = Math.pow(FlickrSimilarityUtil.DISTANCE_THRESHOLD, 0.5);
		
		int x = (int) (outputValue.getLat()/thres);
		int y = (int)(outputValue.getLon()/thres );
		
		
		long zorder = FlickrSimilarityUtil.parseToZOrder(x, y);
		
		
		
		outputValue.setTileNumber((int)zorder);
		outputValue.setKey(zorder);
		outputValue.setTag(tag);
		
		
		
		//the selectivity is 0.01 and data size
//		int[][] bounds ={{342931887,2114,112},{342933349,2114,112},{343020857,2114,112},{343021115,2114,112},{343021117,2114,112},{343021184,2114,112},{343021270,2114,112},{343021948,2114,112},{343022454,2114,112},{343022633,2114,112},{343022699,2114,112},{343022743,2114,112},{343022779,2114,112},{343022782,2114,112},{343022783,2114,112},{343022788,2114,112},{343022818,2114,112},{343022836,2114,112},{343023115,2114,112},{343023124,2114,112},{343023128,2114,112},{343023146,2114,112},{343023152,2114,112},{343023168,2114,112},{343023225,2114,112},{343023281,2114,112},{343023384,2114,112},{343028021,2114,112},{343028767,2114,112},{343029000,2114,112}};
		

		//the 0.01 and computation
//		int[][] bounds ={{342931897,2114,112},{343021115,2114,112},{343021201,2114,112},{343022781,2114,112},{343022782,2114,112},{343022783,2114,112},{343022792,2114,112},{343023121,2114,112},{343023126,2114,112},{343023148,2114,112},{343023149,2114,112},{343023150,2114,112},{343023153,2114,112},{343023163,2114,112},{343023170,2114,112},{343023253,2114,112},{343023384,2114,112},{343023385,2114,112},{343023386,2114,112},{343023387,2114,112},{343023491,2114,112},{343028739,2114,112},{343028808,2114,112},{343028927,2114,112},{343028928,2114,112},{343028929,2114,112},{343029021,2114,112},{343029218,2114,112},{343029229,2114,112},{343029271,2114,112}};
		
		
		//The Original temporal partition, for each time interval, it is a partition, for the R
		//the time interval is the key, while for the S set, copy to other partition in the bound
		
		
		//the selectivity 0.005 and the data size
//		int[][] bounds = {{1373111551,2114,112},{1373117982,2114,112},{1373124106,2114,112},{1373124226,2114,112},{1373124227,2114,112},{1373124229,2114,112},{1373124494,2114,112},{1373125319,2114,112},{1373125825,2114,112},{1373126262,2114,112},{1373126348,2114,112},{1373127324,2114,112},{1373147361,2114,112},{1373147647,2114,112},{1373147989,2114,112},{1373148096,2114,112},{1373148110,2114,112},{1373148208,2114,112},{1373148277,2114,112},{1373148299,2114,112},{1373148316,2114,112},{1373148353,2114,112},{1373148660,2114,112},{1373148804,2114,112},{1373149037,2114,112},{1373149670,2114,112},{1373150315,2114,112},{1373151194,2114,112},{1373156914,2114,112},{1373159941,2114,112}};
		

		//selectivity 0.005 and computation
//		int[][] bounds = {{1373111679,2114,112},{1373124226,2114,112},{1373124227,2114,112},{1373124228,2114,112},{1373125329,2114,112},{1373147647,2114,112},{1373148100,2114,112},{1373148102,2114,112},{1373148125,2114,112},{1373148295,2114,112},{1373148296,2114,112},{1373148297,2114,112},{1373148301,2114,112},{1373148302,2114,112},{1373148303,2114,112},{1373148304,2114,112},{1373148306,2114,112},{1373148312,2114,112},{1373148325,2114,112},{1373148329,2114,112},{1373148741,2114,112},{1373149507,2114,112},{1373159938,2114,112},{1373159939,2114,112},{1373159940,2114,112},{1373159941,2114,112},{1373159945,2114,112},{1373159946,2114,112},{1373159950,2114,112},{1373167719,2114,112}};
		
		
		//the selectivity 0.001 and the data size
//		long[][] bounds = {{21958578772L,2114,112},{21959144989L,2114,112},{21969797781L,2114,112},{21969907675L,2114,112},{21969908542L,2114,112},{21969908628L,2114,112},{21969911104L,2114,112},{21969922487L,2114,112},{21969935053L,2114,112},{21969942253L,2114,112},{21969943571L,2114,112},{21969946549L,2114,112},{21969955667L,2114,112},{21970292296L,2114,112},{21970293821L,2114,112},{21970294317L,2114,112},{21970294435L,2114,112},{21970295161L,2114,112},{21970295483L,2114,112},{21970296294L,2114,112},{21970298719L,2114,112},{21970299119L,2114,112},{21970301441L,2114,112},{21970302611L,2114,112},{21970305160L,2114,112},{21970309242L,2114,112},{21970312044L,2114,112},{21970324533L,2114,112},{21970333825L,2114,112},{21970423019L,2114,112}};
		//selectivity 0.001 and computation
//		long[][] bounds = {{21958578805L,2114,112},{21969908542L,2114,112},{21969908543L,2114,112},{21969908544L,2114,112},{21969908627L,2114,112},{21969920982L,2114,112},{21969922406L,2114,112},{21970294311L,2114,112},{21970294317L,2114,112},{21970294318L,2114,112},{21970294319L,2114,112},{21970294330L,2114,112},{21970294441L,2114,112},{21970295214L,2114,112},{21970298716L,2114,112},{21970298719L,2114,112},{21970298739L,2114,112},{21970298741L,2114,112},{21970298742L,2114,112},{21970298743L,2114,112},{21970298747L,2114,112},{21970298748L,2114,112},{21970298749L,2114,112},{21970298750L,2114,112},{21970298844L,2114,112},{21970302033L,2114,112},{21970305145L,2114,112},{21970312001L,2114,112},{21970312045L,2114,112},{21970325002L,2114,112}};
		

		
		//the selectivity 0.0005 and the data size
//		long[][] bounds = {{74710832813L,2114,112},{74712468905L,2114,112},{74712472220L,2114,112},{74712472253L,2114,112},{74712477714L,2114,112},{74712575237L,2114,112},{74712601808L,2114,112},{74712603793L,2114,112},{74712610929L,2114,112},{74712611792L,2114,112},{74712930098L,2114,112},{74712959684L,2114,112},{74712961225L,2114,112},{74712961708L,2114,112},{74712963085L,2114,112},{74712966150L,2114,112},{74712967516L,2114,112},{74712968635L,2114,112},{74712972023L,2114,112},{74712992001L,2114,112},{74713074618L,2114,112},{74713128507L,2114,112},{74715276624L,2114,112},{74715285504L,2114,112},{74715398187L,2114,112},{74715407486L,2114,112},{74715422847L,2114,112},{74715769801L,2114,112},{74715778080L,2114,112},{74715898037L,2114,112}};
		//selectivity 0.0005 and computation
		long[][] bounds = {{74710882967L,2114,112},{74712472243L,2114,112},{74712472244L,2114,112},{74712472245L,2114,112},{74712472247L,2114,112},{74712472249L,2114,112},{74712472253L,2114,112},{74712472296L,2114,112},{74712611788L,2114,112},{74712611790L,2114,112},{74712611791L,2114,112},{74712611792L,2114,112},{74712611817L,2114,112},{74712961347L,2114,112},{74712966231L,2114,112},{74712967511L,2114,112},{74712967540L,2114,112},{74712967548L,2114,112},{74712972189L,2114,112},{74715276626L,2114,112},{74715276627L,2114,112},{74715276628L,2114,112},{74715276629L,2114,112},{74715276633L,2114,112},{74715276634L,2114,112},{74715276635L,2114,112},{74715408264L,2114,112},{74715777873L,2114,112},{74715777881L,2114,112},{74715777887L,2114,112}};
		
		//the selectivity 0.0001 and the data size
//		long[][] bounds = {{368467703419L,2114,112},{368474055298L,2114,112},{368474701242L,2114,112},{368474712133L,2114,112},{368474712358L,2114,112},{368475437390L,2114,112},{368475531019L,2114,112},{368476238812L,2114,112},{368476385051L,2114,112},{368476590079L,2114,112},{368476770618L,2114,112},{368476777552L,2114,112},{368476778631L,2114,112},{368476790365L,2114,112},{368476800044L,2114,112},{368476812708L,2114,112},{368476890156L,2114,112},{368476891605L,2114,112},{368476909499L,2114,112},{368476934794L,2114,112},{368477078700L,2114,112},{368477113127L,2114,112},{368477138138L,2114,112},{368477479988L,2114,112},{368477539383L,2114,112},{368477598613L,2114,112},{368834756721L,2114,112},{368834923806L,2114,112},{368835546676L,2114,112},{368835954206L,2114,112}};
		
		
		//selectivity 0.0001 and computation
//		long[][] bounds = {{368468025914L,2114,112},{368474712143L,2114,112},{368474712152L,2114,112},{368474712157L,2114,112},{368474712176L,2114,112},{368474712355L,2114,112},{368475437476L,2114,112},{368475437482L,2114,112},{368475532383L,2114,112},{368476777813L,2114,112},{368476778519L,2114,112},{368476778520L,2114,112},{368476778521L,2114,112},{368476778525L,2114,112},{368476778526L,2114,112},{368476778592L,2114,112},{368476790531L,2114,112},{368476790532L,2114,112},{368476790533L,2114,112},{368476890299L,2114,112},{368476890662L,2114,112},{368476890684L,2114,112},{368476890776L,2114,112},{368476891589L,2114,112},{368476892172L,2114,112},{368476897010L,2114,112},{368476956383L,2114,112},{368477481702L,2114,112},{368477598588L,2114,112},{368477645829L,2114,112}};
		

		/****************************************************************
		 * 
		 * 
		 * The Partition Method
		 * 
		 * 
		 * 
		 ****************************************************************/
		
		if(!outputValue.getTiles().equals("null")){
			
			if(tag == FlickrSimilarityUtil.S_tag){
				
				int pNumber = 0;
				
				if(zorder >= bounds[bounds.length-1][0]){
					
					pNumber = bounds.length;
					
				}else{
					
					for(int i = 0; i < bounds.length;i++){
						
						if(zorder < bounds[i][0]){
							pNumber = i;
							break;
						}
					}
				}
				
				
				if(pNumber == 0){
					pNumber = 1;
				}
				outputKey.set(pNumber);
				outputValue.setKey(zorder );
				context.write(outputKey, outputValue);
				
				
				
				if(pNumber == bounds.length){
					if(zorder- bounds[bounds.length-1][0] == 0){
						outputKey.set(pNumber-1);
						outputValue.setKey(zorder );
						context.write(outputKey, outputValue);
					}
				}
				
				
				if(pNumber >= 1 && pNumber <= bounds.length-1){
					
					if(zorder- bounds[pNumber-1][0] == 0){
						outputKey.set(pNumber-1);
						outputValue.setKey(zorder );
						context.write(outputKey, outputValue);
					}
					
					
					if(zorder- bounds[pNumber][0] == -1){
						outputKey.set(pNumber+1);
						outputValue.setKey(zorder );
						context.write(outputKey, outputValue);
					}
				}
				
				
			}else{
				
				int pNumber = 0;
				
				if(zorder >= bounds[bounds.length-1][0]){
					
					pNumber = bounds.length;
					
				}else{
					
					for(int i = 0; i < bounds.length;i++){
						
						if(zorder < bounds[i][0]){
							pNumber = i;
							break;
						}
					}
				}
				
				if(pNumber == 0){
					pNumber  = 1;
				}
				//for the R set
				outputKey.set(pNumber);
				outputValue.setTileNumber((int)zorder);
				context.write(outputKey, outputValue);
			}
			}
		
	
		
		
		
		
	}
	protected void cleanup(Context context) throws IOException, InterruptedException {
		System.out.println("The mapper end at " + System.currentTimeMillis() + "\n" );
	}
}